"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitTranspiledFiles = void 0;
const path = require("path");
const ts = require("typescript");
const CompilerOptions_1 = require("../CompilerOptions");
const LuaLib_1 = require("../LuaLib");
const utils_1 = require("../utils");
function emitTranspiledFiles(program, transpiledFiles, emitHost = ts.sys) {
    const options = program.getCompilerOptions();
    let { outDir, luaLibImport, luaBundle } = options;
    const rootDir = program.getCommonSourceDirectory();
    outDir = outDir !== null && outDir !== void 0 ? outDir : rootDir;
    const files = [];
    for (const { fileName, lua, sourceMap, declaration, declarationMap } of transpiledFiles) {
        let outPath = fileName;
        if (outDir !== rootDir) {
            outPath = path.resolve(outDir, path.relative(rootDir, fileName));
        }
        // change extension
        outPath = utils_1.normalizeSlashes(utils_1.trimExtension(outPath) + ".lua");
        if (lua !== undefined) {
            files.push({ name: outPath, text: lua });
        }
        if (sourceMap !== undefined && options.sourceMap) {
            files.push({ name: outPath + ".map", text: sourceMap });
        }
        if (declaration !== undefined) {
            files.push({ name: utils_1.trimExtension(outPath) + ".d.ts", text: declaration });
        }
        if (declarationMap !== undefined) {
            files.push({ name: utils_1.trimExtension(outPath) + ".d.ts.map", text: declarationMap });
        }
    }
    if (!luaBundle &&
        (luaLibImport === undefined ||
            luaLibImport === CompilerOptions_1.LuaLibImportKind.Require ||
            luaLibImport === CompilerOptions_1.LuaLibImportKind.Always)) {
        const lualibRequired = files.some(f => { var _a; return (_a = f.text) === null || _a === void 0 ? void 0 : _a.includes('require("lualib_bundle")'); });
        if (lualibRequired) {
            let outPath = path.resolve(rootDir, "lualib_bundle.lua");
            if (outDir !== rootDir) {
                outPath = path.join(outDir, path.relative(rootDir, outPath));
            }
            files.push({ name: utils_1.normalizeSlashes(outPath), text: LuaLib_1.getLuaLibBundle(emitHost) });
        }
    }
    return files;
}
exports.emitTranspiledFiles = emitTranspiledFiles;
//# sourceMappingURL=emit.js.map