"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transpile = void 0;
const ts = require("typescript");
const CompilerOptions_1 = require("../CompilerOptions");
const LuaPrinter_1 = require("../LuaPrinter");
const transformation_1 = require("../transformation");
const utils_1 = require("../utils");
const bundle_1 = require("./bundle");
const plugins_1 = require("./plugins");
const transformers_1 = require("./transformers");
function transpile({ program, sourceFiles: targetSourceFiles, customTransformers = {}, plugins: customPlugins = [], emitHost = ts.sys, }) {
    const options = program.getCompilerOptions();
    const diagnostics = CompilerOptions_1.validateOptions(options);
    let transpiledFiles = [];
    const updateTranspiledFile = (fileName, update) => {
        const file = transpiledFiles.find(f => f.fileName === fileName);
        if (file) {
            Object.assign(file, update);
        }
        else {
            transpiledFiles.push({ fileName, ...update });
        }
    };
    if (options.noEmitOnError) {
        const preEmitDiagnostics = [
            ...diagnostics,
            ...program.getOptionsDiagnostics(),
            ...program.getGlobalDiagnostics(),
        ];
        if (targetSourceFiles) {
            for (const sourceFile of targetSourceFiles) {
                preEmitDiagnostics.push(...program.getSyntacticDiagnostics(sourceFile));
                preEmitDiagnostics.push(...program.getSemanticDiagnostics(sourceFile));
            }
        }
        else {
            preEmitDiagnostics.push(...program.getSyntacticDiagnostics());
            preEmitDiagnostics.push(...program.getSemanticDiagnostics());
        }
        if (preEmitDiagnostics.length === 0 && (options.declaration || options.composite)) {
            preEmitDiagnostics.push(...program.getDeclarationDiagnostics());
        }
        if (preEmitDiagnostics.length > 0) {
            return { diagnostics: preEmitDiagnostics, transpiledFiles };
        }
    }
    const plugins = plugins_1.getPlugins(program, diagnostics, customPlugins);
    const visitorMap = transformation_1.createVisitorMap(plugins.map(p => p.visitors).filter(utils_1.isNonNull));
    const printer = LuaPrinter_1.createPrinter(plugins.map(p => p.printer).filter(utils_1.isNonNull));
    const processSourceFile = (sourceFile) => {
        const { luaAst, luaLibFeatures, diagnostics: transformDiagnostics } = transformation_1.transformSourceFile(program, sourceFile, visitorMap);
        diagnostics.push(...transformDiagnostics);
        if (!options.noEmit && !options.emitDeclarationOnly) {
            const { code, sourceMap, sourceMapNode } = printer(program, emitHost, sourceFile.fileName, luaAst, luaLibFeatures);
            updateTranspiledFile(sourceFile.fileName, { luaAst, lua: code, sourceMap, sourceMapNode });
        }
    };
    const transformers = transformers_1.getTransformers(program, diagnostics, customTransformers, processSourceFile);
    const writeFile = (fileName, data, _bom, _onError, sourceFiles = []) => {
        for (const sourceFile of sourceFiles) {
            const isDeclaration = fileName.endsWith(".d.ts");
            const isDeclarationMap = fileName.endsWith(".d.ts.map");
            if (isDeclaration) {
                updateTranspiledFile(sourceFile.fileName, { declaration: data });
            }
            else if (isDeclarationMap) {
                updateTranspiledFile(sourceFile.fileName, { declarationMap: data });
            }
        }
    };
    const isEmittableJsonFile = (sourceFile) => sourceFile.flags & ts.NodeFlags.JsonFile &&
        !options.emitDeclarationOnly &&
        !program.isSourceFileFromExternalLibrary(sourceFile);
    // We always have to emit to get transformer diagnostics
    const oldNoEmit = options.noEmit;
    options.noEmit = false;
    if (targetSourceFiles) {
        for (const file of targetSourceFiles) {
            if (isEmittableJsonFile(file)) {
                processSourceFile(file);
            }
            else {
                diagnostics.push(...program.emit(file, writeFile, undefined, false, transformers).diagnostics);
            }
        }
    }
    else {
        diagnostics.push(...program.emit(undefined, writeFile, undefined, false, transformers).diagnostics);
        // JSON files don't get through transformers and aren't written when outDir is the same as rootDir
        program.getSourceFiles().filter(isEmittableJsonFile).forEach(processSourceFile);
    }
    options.noEmit = oldNoEmit;
    if (options.noEmit || (options.noEmitOnError && diagnostics.length > 0)) {
        transpiledFiles = [];
    }
    if (options.luaBundle && options.luaBundleEntry) {
        const [bundleDiagnostics, bundle] = bundle_1.bundleTranspiledFiles(options.luaBundle, options.luaBundleEntry, transpiledFiles, program, emitHost);
        diagnostics.push(...bundleDiagnostics);
        transpiledFiles = [bundle];
    }
    return { diagnostics, transpiledFiles };
}
exports.transpile = transpile;
//# sourceMappingURL=transpile.js.map