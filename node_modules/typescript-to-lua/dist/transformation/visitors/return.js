"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformReturnStatement = void 0;
const ts = require("typescript");
const lua = require("../../LuaAST");
const annotations_1 = require("../utils/annotations");
const assignment_validation_1 = require("../utils/assignment-validation");
const lua_ast_1 = require("../utils/lua-ast");
const scope_1 = require("../utils/scope");
const typescript_1 = require("../utils/typescript");
exports.transformReturnStatement = (statement, context) => {
    // Bubble up explicit return flag and check if we're inside a try/catch block
    let insideTryCatch = false;
    for (const scope of scope_1.walkScopesUp(context)) {
        scope.functionReturned = true;
        if (scope.type === scope_1.ScopeType.Function) {
            break;
        }
        insideTryCatch = insideTryCatch || scope.type === scope_1.ScopeType.Try || scope.type === scope_1.ScopeType.Catch;
    }
    let results;
    if (statement.expression) {
        const expressionType = context.checker.getTypeAtLocation(statement.expression);
        const returnType = context.checker.getContextualType(statement.expression);
        if (returnType) {
            assignment_validation_1.validateAssignment(context, statement, expressionType, returnType);
        }
        if (annotations_1.isInTupleReturnFunction(context, statement)) {
            // Parent function is a TupleReturn function
            if (ts.isArrayLiteralExpression(statement.expression)) {
                // If return expression is an array literal, leave out brackets.
                results = statement.expression.elements.map(e => context.transformExpression(e));
            }
            else if (!annotations_1.isTupleReturnCall(context, statement.expression) && typescript_1.isArrayType(context, expressionType)) {
                // If return expression is an array-type and not another TupleReturn call, unpack it
                results = [
                    lua_ast_1.createUnpackCall(context, context.transformExpression(statement.expression), statement.expression),
                ];
            }
            else {
                results = [context.transformExpression(statement.expression)];
            }
            // Wrap tupleReturn results when returning inside try/catch
            if (insideTryCatch) {
                results = [lua_ast_1.wrapInTable(...results)];
            }
        }
        else {
            results = [context.transformExpression(statement.expression)];
        }
    }
    else {
        // Empty return
        results = [];
    }
    if (insideTryCatch) {
        results.unshift(lua.createBooleanLiteral(true));
    }
    return lua.createReturnStatement(results, statement);
};
//# sourceMappingURL=return.js.map