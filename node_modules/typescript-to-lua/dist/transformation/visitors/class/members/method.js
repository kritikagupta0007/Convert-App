"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformMethodDeclaration = void 0;
const lua = require("../../../../LuaAST");
const function_1 = require("../../function");
const literal_1 = require("../../literal");
const utils_1 = require("../utils");
function transformMethodDeclaration(context, node, className, noPrototype) {
    // Don't transform methods without body (overload declarations)
    if (!node.body) {
        return undefined;
    }
    const methodTable = utils_1.isStaticNode(node) || noPrototype
        ? lua.cloneIdentifier(className)
        : lua.createTableIndexExpression(lua.cloneIdentifier(className), lua.createStringLiteral("prototype"));
    let methodName = literal_1.transformPropertyName(context, node.name);
    if (lua.isStringLiteral(methodName) && methodName.value === "toString") {
        methodName = lua.createStringLiteral("__tostring", node.name);
    }
    const [functionExpression] = function_1.transformFunctionToExpression(context, node);
    return lua.createAssignmentStatement(lua.createTableIndexExpression(methodTable, methodName), functionExpression, node);
}
exports.transformMethodDeclaration = transformMethodDeclaration;
//# sourceMappingURL=method.js.map