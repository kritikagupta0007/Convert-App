"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridView = void 0;
const type_1 = require("../../dart/core/type");
const dragStartBehavior_1 = require("./../gestures/dragStartBehavior");
const axis_1 = require("./../painting/axis");
const statelessWidget_1 = require("./statelessWidget");
class GridView extends statelessWidget_1.StatelessWidget {
    constructor(gridViewType, props) {
        super();
        this.internalRuntimeType = new type_1.Type(GridView);
        this.gridViewType = gridViewType;
        this.props = props;
    }
    static count(props) {
        if (!props.scrollDirection) {
            props.scrollDirection = axis_1.Axis.vertical;
        }
        if (!props.reverse) {
            props.reverse = false;
        }
        if (!props.mainAxisSpacing) {
            props.mainAxisSpacing = 0.0;
        }
        if (!props.crossAxisSpacing) {
            props.crossAxisSpacing = 0.0;
        }
        if (!props.childAspectRatio) {
            props.childAspectRatio = 1.0;
        }
        if (props.addAutomaticKeepAlives == undefined) {
            props.addAutomaticKeepAlives = true;
        }
        if (props.addRepaintBoundaries == undefined) {
            props.addRepaintBoundaries = true;
        }
        if (props.addSemanticIndexes == undefined) {
            props.addSemanticIndexes = true;
        }
        if (!props.dragStartBehavior) {
            props.dragStartBehavior = dragStartBehavior_1.DragStartBehavior.start;
        }
        return new GridView("count", props);
    }
    build() {
        switch (this.gridViewType) {
            case "count":
                return flutter.widgets.gridViewCount(this.props);
                break;
        }
    }
}
exports.GridView = GridView;
