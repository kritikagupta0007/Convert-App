"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transform = void 0;
const type_1 = require("../../dart/core/type");
const alignment_1 = require("./../painting/alignment");
const statelessWidget_1 = require("./statelessWidget");
class Transform extends statelessWidget_1.StatelessWidget {
    constructor(props) {
        super();
        this.internalRuntimeType = new type_1.Type(Transform);
        this.props = props;
    }
    static rotate(props) {
        if (props.alignment === undefined) {
            props.alignment = alignment_1.Alignment.center;
        }
        if (props.transformHitTests === undefined) {
            props.transformHitTests = true;
        }
        return new Transform({
            transformType: "rotate",
            key: props.key,
            angle: props.angle,
            origin: props.origin,
            alignment: props.alignment,
            transformHitTests: props.transformHitTests,
            child: props.child,
        });
    }
    static translate(props) {
        if (props.transformHitTests === undefined) {
            props.transformHitTests = true;
        }
        return new Transform({
            transformType: "translate",
            key: props.key,
            offset: props.offset,
            transformHitTests: props.transformHitTests,
            child: props.child,
        });
    }
    static scale(props) {
        if (props.alignment === undefined) {
            props.alignment = alignment_1.Alignment.center;
        }
        if (props.transformHitTests === undefined) {
            props.transformHitTests = true;
        }
        return new Transform({
            transformType: "scale",
            key: props.key,
            scale: props.scale,
            origin: props.origin,
            alignment: props.alignment,
            transformHitTests: props.transformHitTests,
            child: props.child,
        });
    }
    build() {
        switch (this.props.transformType) {
            case "rotate":
                return flutter.widgets.transformRotate(this.props);
                break;
            case "translate":
                return flutter.widgets.transformTranslate(this.props);
                break;
            case "scale":
                return flutter.widgets.transformScale(this.props);
                break;
        }
    }
}
exports.Transform = Transform;
