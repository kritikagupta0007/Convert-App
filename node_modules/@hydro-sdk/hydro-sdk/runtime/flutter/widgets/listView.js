"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListView = void 0;
const list_1 = require("../../dart/collection/list");
const type_1 = require("../../dart/core/type");
const dragStartBehavior_1 = require("../gestures/dragStartBehavior");
const axis_1 = require("../painting/axis");
const scrollViewKeyboardDismissBehavior_1 = require("./scrollViewKeyboardDismissBehavior");
const statelessWidget_1 = require("./statelessWidget");
class ListView extends statelessWidget_1.StatelessWidget {
    constructor(listViewType, props) {
        super();
        this.internalRuntimeType = new type_1.Type(ListView);
        this.listViewType = listViewType;
        this.props = props;
    }
    build() {
        switch (this.listViewType) {
            case "builder":
                return flutter.widgets.listViewBuilder(this.props);
                break;
            case "regular":
                return flutter.widgets.listViewRegular(this.props);
                break;
        }
    }
    static create(props) {
        if (props.scrollDirection === undefined) {
            props.scrollDirection = axis_1.Axis.vertical;
        }
        if (props.reverse === undefined) {
            props.reverse = false;
        }
        if (props.shrinkWrap === undefined) {
            props.shrinkWrap = false;
        }
        if (props.addAutomaticKeepAlives === undefined) {
            props.addAutomaticKeepAlives = true;
        }
        if (props.addRepaintBoundaries === undefined) {
            props.addRepaintBoundaries = true;
        }
        if (props.addSemanticIndexes === undefined) {
            props.addSemanticIndexes = true;
        }
        if (props.children === undefined) {
            props.children = list_1.List.fromArray([]);
        }
        if (props.dragStartBehavior === undefined) {
            props.dragStartBehavior = dragStartBehavior_1.DragStartBehavior.start;
        }
        if (props.keyboardDismissBehavior === undefined) {
            props.keyboardDismissBehavior =
                scrollViewKeyboardDismissBehavior_1.ScrollViewKeyboardDismissBehavior.manual;
        }
        return new ListView("regular", props);
    }
    static builder(props) {
        if (props.scrollDirection === undefined) {
            props.scrollDirection = axis_1.Axis.vertical;
        }
        if (props.reverse === undefined) {
            props.reverse = false;
        }
        if (props.shrinkWrap === undefined) {
            props.shrinkWrap = false;
        }
        if (props.addAutomaticKeepAlives === undefined) {
            props.addAutomaticKeepAlives = true;
        }
        if (props.addRepaintBoundaries === undefined) {
            props.addRepaintBoundaries = true;
        }
        if (props.addSemanticIndexes === undefined) {
            props.addSemanticIndexes = true;
        }
        if (props.dragStartBehavior === undefined) {
            props.dragStartBehavior = dragStartBehavior_1.DragStartBehavior.start;
        }
        return new ListView("builder", props);
    }
}
exports.ListView = ListView;
