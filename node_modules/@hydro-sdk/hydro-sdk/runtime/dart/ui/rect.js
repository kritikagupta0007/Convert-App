"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rect = void 0;
class Rect {
    constructor() {
        this.left = undefined;
        this.top = undefined;
        this.right = undefined;
        this.bottom = undefined;
        this._dart_getWidth = undefined;
        this._dart_getHeight = undefined;
        this._dart_getSize = undefined;
        this._dart_getHasNaN = undefined;
        this._dart_getIsInfinite = undefined;
        this._dart_getIsFinite = undefined;
        this._dart_getIsEmpty = undefined;
        this._dart_shift = undefined;
        this._dart_translate = undefined;
        this._dart_inflate = undefined;
        this._dart_deflate = undefined;
        this._dart_intersect = undefined;
        this._dart_expandToInclude = undefined;
        this._dart_overlaps = undefined;
        this._dart_getShortestSide = undefined;
        this._dart_getLongestSide = undefined;
        this._dart_getTopLeft = undefined;
        this._dart_getTopCenter = undefined;
        this._dart_getTopRight = undefined;
        this._dart_getCenterLeft = undefined;
        this._dart_getCenter = undefined;
        this._dart_getCenterRight = undefined;
        this._dart_getBottomLeft = undefined;
        this._dart_getBottomCenter = undefined;
        this._dart_getBottomRight = undefined;
        this._dart_contains = undefined;
        this._dart_getHashCode = undefined;
        this._dart_toString = undefined;
    }
    static fromLTRB(left, top, right, bottom) {
        return dart.ui.rectFromLTRB(left, top, right, bottom);
    }
    static fromLTWH(left, top, width, height) {
        return dart.ui.rectFromLTWH(left, top, width, height);
    }
    static fromCircle(props) {
        return dart.ui.rectFromCircle(props);
    }
    static fromCenter(props) {
        return dart.ui.rectFromCenter(props);
    }
    static fromPoints(a, b) {
        return dart.ui.rectFromPoints(a, b);
    }
    static lerp(a, b, t) {
        return dart.ui.rectLerp(a, b, t);
    }
    getWidth() {
        return this._dart_getWidth();
    }
    getHeight() {
        return this._dart_getHeight();
    }
    getSize() {
        return this._dart_getSize();
    }
    getHasNaN() {
        return this._dart_getHasNaN();
    }
    getIsInfinite() {
        return this._dart_getIsInfinite();
    }
    getIsFinite() {
        return this._dart_getIsFinite();
    }
    getIsEmpty() {
        return this._dart_getIsEmpty();
    }
    shift(offset) {
        return this._dart_shift(offset);
    }
    translate(translateX, translateY) {
        return this._dart_translate(translateX, translateY);
    }
    inflate(delta) {
        return this._dart_inflate(delta);
    }
    deflate(delta) {
        return this._dart_deflate(delta);
    }
    intersect(other) {
        return this._dart_intersect(other);
    }
    expandToInclude(other) {
        return this._dart_expandToInclude(other);
    }
    overlaps(other) {
        return this._dart_overlaps(other);
    }
    getShortestSide() {
        return this._dart_getShortestSide();
    }
    getLongestSide() {
        return this._dart_getLongestSide();
    }
    getTopLeft() {
        return this._dart_getTopLeft();
    }
    getTopCenter() {
        return this._dart_getTopCenter();
    }
    getTopRight() {
        return this._dart_getTopRight();
    }
    getCenterLeft() {
        return this._dart_getCenterLeft();
    }
    getCenter() {
        return this._dart_getCenter();
    }
    getCenterRight() {
        return this._dart_getCenterRight();
    }
    getBottomLeft() {
        return this._dart_getBottomLeft();
    }
    getBottomCenter() {
        return this._dart_getBottomCenter();
    }
    getBottomRight() {
        return this._dart_getBottomRight();
    }
    contains(offset) {
        return this._dart_contains(offset);
    }
    getHashCode() {
        return this._dart_getHashCode();
    }
    toString() {
        return this._dart_toString();
    }
}
exports.Rect = Rect;
Rect.zero = Rect.fromLTRB(0.0, 0.0, 0.0, 0.0);
Rect._giantScalar = 1.0e9;
Rect.largest = Rect.fromLTRB(-Rect._giantScalar, -Rect._giantScalar, Rect._giantScalar, Rect._giantScalar);
